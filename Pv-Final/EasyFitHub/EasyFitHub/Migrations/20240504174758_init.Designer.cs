// <auto-generated />
using System;
using EasyFitHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyFitHub.Migrations
{
    [DbContext(typeof(EasyFitHubContext))]
    [Migration("20240504174758_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyFitHub.Models.Account.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecoverCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasFilter("[Token] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasDiscriminator<int>("AccountType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Gym");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "O seu destino definitivo para fitness e bem-estar à beira do rio Tejo. O FitTejo oferece uma experiência de treino premium com vistas deslumbrantes do rio e uma atmosfera energética.",
                            IsConfirmed = true,
                            Location = "Vale de Milhacos, Corroios, Seixal, Setúbal, Portugal",
                            Name = "FitTejo",
                            RegisterDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2754)
                        },
                        new
                        {
                            Id = 2,
                            Description = "FitnessUp é um ginásio moderno e acolhedor, oferecendo uma ampla variedade de equipamentos de última geração e aulas de fitness emocionantes. Nossa equipe dedicada está aqui para ajudá-lo a alcançar seus objetivos de saúde e fitness, independentemente de seu nível de condicionamento físico atual.",
                            IsConfirmed = true,
                            Location = "Alto do Moinho, Corroios, Seixal, Setúbal, Portugal",
                            Name = "FitnessUp",
                            RegisterDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2759)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bem-vindo ao CorroiosGym, o seu destino para uma vida saudável e ativa. Localizado no coração de Corroios, nosso ginásio oferece uma atmosfera amigável e motivadora, equipamentos de alta qualidade e treinadores experientes.",
                            IsConfirmed = false,
                            Location = "Marialva, Corroios, Seixal, Setúbal, Portugal",
                            Name = "CorroiosGym",
                            RegisterDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2763)
                        },
                        new
                        {
                            Id = 4,
                            Description = "IPSGym é mais do que apenas um ginásio - é uma comunidade dedicada ao fitness e ao bem-estar. Com instalações modernas e uma variedade de programas de treinamento, desde musculação até aulas de grupo, estamos aqui para apoiar você em sua jornada de saúde. Junte-se a nós e descubra o poder da transformação pessoal.",
                            IsConfirmed = false,
                            Location = "Estafanilho, Praias do Sado, Setúbal, Portugal",
                            Name = "IPSGym",
                            RegisterDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2768)
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymClient", b =>
                {
                    b.Property<int>("GymClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymClientId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("GymClientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GymId");

                    b.ToTable("GymClients");

                    b.HasData(
                        new
                        {
                            GymClientId = 1,
                            ClientId = 1,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2960),
                            GymId = 1,
                            Role = 0
                        },
                        new
                        {
                            GymClientId = 2,
                            ClientId = 2,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2965),
                            GymId = 1,
                            Role = 0
                        },
                        new
                        {
                            GymClientId = 3,
                            ClientId = 3,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2967),
                            GymId = 1,
                            Role = 0
                        },
                        new
                        {
                            GymClientId = 4,
                            ClientId = 4,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2969),
                            GymId = 2,
                            Role = 0
                        },
                        new
                        {
                            GymClientId = 5,
                            ClientId = 5,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2971),
                            GymId = 2,
                            Role = 0
                        },
                        new
                        {
                            GymClientId = 6,
                            ClientId = 6,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2973),
                            GymId = 2,
                            Role = 0
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymEmployee", b =>
                {
                    b.Property<int>("GymEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymEmployeeId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("GymEmployeeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GymId");

                    b.ToTable("GymEmployees");

                    b.HasData(
                        new
                        {
                            GymEmployeeId = 1,
                            ClientId = 7,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2918),
                            GymId = 1,
                            Role = 1
                        },
                        new
                        {
                            GymEmployeeId = 2,
                            ClientId = 8,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2924),
                            GymId = 1,
                            Role = 2
                        },
                        new
                        {
                            GymEmployeeId = 3,
                            ClientId = 9,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2926),
                            GymId = 1,
                            Role = 3
                        },
                        new
                        {
                            GymEmployeeId = 4,
                            ClientId = 10,
                            EnrollmentDate = new DateTime(2024, 5, 4, 18, 47, 56, 791, DateTimeKind.Local).AddTicks(2928),
                            GymId = 2,
                            Role = 1
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymRelation", b =>
                {
                    b.Property<int>("GymRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymRelationId"));

                    b.Property<int>("GymClientId")
                        .HasColumnType("int");

                    b.Property<int>("GymEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("GymRelationId");

                    b.HasIndex("GymClientId");

                    b.HasIndex("GymEmployeeId");

                    b.ToTable("GymRelations");

                    b.HasData(
                        new
                        {
                            GymRelationId = 1,
                            GymClientId = 1,
                            GymEmployeeId = 1
                        },
                        new
                        {
                            GymRelationId = 2,
                            GymClientId = 1,
                            GymEmployeeId = 2
                        },
                        new
                        {
                            GymRelationId = 3,
                            GymClientId = 2,
                            GymEmployeeId = 1
                        },
                        new
                        {
                            GymRelationId = 4,
                            GymClientId = 4,
                            GymEmployeeId = 4
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GymId");

                    b.ToTable("GymRequests");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            ClientId = 11,
                            GymId = 2
                        },
                        new
                        {
                            RequestId = 2,
                            ClientId = 12,
                            GymId = 2
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ImageId");

                    b.HasIndex("MachineId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            Description = "Desafie-se com uma corrida em uma esteira inclinada para um treino cardiovascular intenso.",
                            ImageId = 10,
                            MachineId = 1,
                            Name = "Corrida Inclinada"
                        },
                        new
                        {
                            ExerciseId = 2,
                            Description = "Um exercício de caminhada relaxante para melhorar a saúde cardiovascular e queimar calorias.",
                            ImageId = 11,
                            MachineId = 1,
                            Name = "Caminhada Moderada"
                        },
                        new
                        {
                            ExerciseId = 3,
                            Description = "Experimente um treino de bicicleta estável com resistência ajustável para fortalecer as pernas e queimar gordura.",
                            ImageId = 12,
                            MachineId = 2,
                            Name = "Ciclismo de Resistência"
                        },
                        new
                        {
                            ExerciseId = 4,
                            Description = "Alternância entre períodos de alta e baixa intensidade em uma bicicleta ergométrica para melhorar o condicionamento físico.",
                            ImageId = 13,
                            MachineId = 2,
                            Name = "Treino Intervalado de Bicicleta"
                        },
                        new
                        {
                            ExerciseId = 5,
                            Description = "Execute movimentos de remo controlados em uma máquina de remo para trabalhar todo o corpo e melhorar a resistência.",
                            ImageId = 14,
                            MachineId = 3,
                            Name = "Remada Longa e Lenta"
                        },
                        new
                        {
                            ExerciseId = 6,
                            Description = "Aumente a resistência e a velocidade para um treino de remo de alta intensidade que desafia o corpo e queima calorias.",
                            ImageId = 15,
                            MachineId = 3,
                            Name = "Remada Intensa"
                        },
                        new
                        {
                            ExerciseId = 7,
                            Description = "Desafie-se com uma corrida em uma esteira inclinada para um treino cardiovascular intenso.",
                            MachineId = 4,
                            Name = "Corrida Inclinada"
                        },
                        new
                        {
                            ExerciseId = 8,
                            Description = "Um exercício de caminhada relaxante para melhorar a saúde cardiovascular e queimar calorias.",
                            MachineId = 4,
                            Name = "Caminhada Moderada"
                        },
                        new
                        {
                            ExerciseId = 9,
                            Description = "Experimente um treino de bicicleta estável com resistência ajustável para fortalecer as pernas e queimar gordura.",
                            MachineId = 5,
                            Name = "Ciclismo de Resistência"
                        },
                        new
                        {
                            ExerciseId = 10,
                            Description = "Alternância entre períodos de alta e baixa intensidade em uma bicicleta ergométrica para melhorar o condicionamento físico.",
                            MachineId = 5,
                            Name = "Treino Intervalado de Bicicleta"
                        },
                        new
                        {
                            ExerciseId = 11,
                            Description = "Execute movimentos de remo controlados em uma máquina de remo para trabalhar todo o corpo e melhorar a resistência.",
                            MachineId = 6,
                            Name = "Remada Longa e Lenta"
                        },
                        new
                        {
                            ExerciseId = 12,
                            Description = "Aumente a resistência e a velocidade para um treino de remo de alta intensidade que desafia o corpo e queima calorias.",
                            MachineId = 6,
                            Name = "Remada Intensa"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.GymMachine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MachineId");

                    b.HasIndex("GymId");

                    b.HasIndex("ImageId");

                    b.ToTable("GymMachines");

                    b.HasData(
                        new
                        {
                            MachineId = 1,
                            Description = "Perfeita para corridas intensas e caminhadas, com inclinação ajustável e monitor de ritmo cardíaco integrado.",
                            GymId = 1,
                            ImageId = 7,
                            Name = "Esteira Elétrica",
                            Quantity = 2
                        },
                        new
                        {
                            MachineId = 2,
                            Description = "Proporciona um treino cardiovascular eficaz, com resistência ajustável e tela LCD para acompanhar o progresso do treino.",
                            GymId = 1,
                            ImageId = 8,
                            Name = "Bicicleta Ergométrica",
                            Quantity = 2
                        },
                        new
                        {
                            MachineId = 3,
                            Description = "Ótima para exercícios de cardio e fortalecimento muscular, com ajuste de resistência e monitor de desempenho integrado.",
                            GymId = 1,
                            ImageId = 9,
                            Name = "Máquina de Remo",
                            Quantity = 2
                        },
                        new
                        {
                            MachineId = 4,
                            Description = "Perfeita para corridas intensas e caminhadas, com inclinação ajustável e monitor de ritmo cardíaco integrado.",
                            GymId = 2,
                            Name = "Esteira Elétrica",
                            Quantity = 2
                        },
                        new
                        {
                            MachineId = 5,
                            Description = "Proporciona um treino cardiovascular eficaz, com resistência ajustável e tela LCD para acompanhar o progresso do treino.",
                            GymId = 2,
                            Name = "Bicicleta Ergométrica",
                            Quantity = 2
                        },
                        new
                        {
                            MachineId = 6,
                            Description = "Ótima para exercícios de cardio e fortalecimento muscular, com ajuste de resistência e monitor de desempenho integrado.",
                            GymId = 2,
                            Name = "Máquina de Remo",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("GymId");

                    b.HasIndex("ImageId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Description = "Este shaker de proteína é perfeito para preparar seus shakes pós-treino. Com design ergonômico e capacidade de mistura eficaz, você pode desfrutar de uma bebida deliciosa e nutritiva sempre que precisar.",
                            GymId = 1,
                            ImageId = 1,
                            Name = "Shaker de Proteína",
                            Price = 5.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 2,
                            Description = "Esta esteira de yoga oferece aderência superior e conforto durante suas práticas de yoga ou alongamento. Feita com material antiderrapante de alta qualidade, é ideal para uso em casa ou no estúdio.",
                            GymId = 1,
                            ImageId = 2,
                            Name = "Esteira de Yoga Antiderrapante",
                            Price = 7.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 3,
                            Description = "Proteja suas mãos durante os exercícios de levantamento de peso com estas luvas acolchoadas. Feitas com material durável e almofadado, proporcionam aderência e suporte, permitindo que você se concentre em seu treino.",
                            GymId = 1,
                            ImageId = 3,
                            Name = "Luvas de Levantamento de Peso Acolchoadas",
                            Price = 9.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 4,
                            Description = "Mantenha-se hidratado durante o dia com esta garrafa de água isolada. Feita de aço inoxidável durável e com isolamento a vácuo, mantém suas bebidas frias por até 24 horas ou quentes por até 12 horas.",
                            GymId = 1,
                            ImageId = 4,
                            Name = "Garrafa de Água Isolada de Aço Inoxidável",
                            Price = 12.99,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 5,
                            Description = "Aumente a intensidade do seu treino com estas faixas de resistência de látex. Disponíveis em diferentes níveis de resistência, são ideais para exercícios de fortalecimento muscular, alongamento e reabilitação.",
                            GymId = 1,
                            ImageId = 5,
                            Name = "Faixas de Resistência de Látex",
                            Price = 14.99,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 6,
                            Description = "Esta pulseira inteligente rastreia sua atividade diária, frequência cardíaca, qualidade do sono e muito mais. Com design elegante e conectividade Bluetooth, é o companheiro perfeito para ajudá-lo a alcançar seus objetivos de fitness.",
                            GymId = 1,
                            ImageId = 6,
                            Name = "Pulseira Inteligente de Monitoramento de Atividade",
                            Price = 17.989999999999998,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 7,
                            Description = "Este shaker de proteína é perfeito para preparar seus shakes pós-treino. Com design ergonômico e capacidade de mistura eficaz, você pode desfrutar de uma bebida deliciosa e nutritiva sempre que precisar.",
                            GymId = 2,
                            Name = "Shaker de Proteína",
                            Price = 5.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 8,
                            Description = "Esta esteira de yoga oferece aderência superior e conforto durante suas práticas de yoga ou alongamento. Feita com material antiderrapante de alta qualidade, é ideal para uso em casa ou no estúdio.",
                            GymId = 2,
                            Name = "Esteira de Yoga Antiderrapante",
                            Price = 7.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 9,
                            Description = "Proteja suas mãos durante os exercícios de levantamento de peso com estas luvas acolchoadas. Feitas com material durável e almofadado, proporcionam aderência e suporte, permitindo que você se concentre em seu treino.",
                            GymId = 2,
                            Name = "Luvas de Levantamento de Peso Acolchoadas",
                            Price = 9.9900000000000002,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 10,
                            Description = "Mantenha-se hidratado durante o dia com esta garrafa de água isolada. Feita de aço inoxidável durável e com isolamento a vácuo, mantém suas bebidas frias por até 24 horas ou quentes por até 12 horas.",
                            GymId = 2,
                            Name = "Garrafa de Água Isolada de Aço Inoxidável",
                            Price = 12.99,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 11,
                            Description = "Aumente a intensidade do seu treino com estas faixas de resistência de látex. Disponíveis em diferentes níveis de resistência, são ideais para exercícios de fortalecimento muscular, alongamento e reabilitação.",
                            GymId = 2,
                            Name = "Faixas de Resistência de Látex",
                            Price = 14.99,
                            Quantity = 6
                        },
                        new
                        {
                            ItemId = 12,
                            Description = "Esta pulseira inteligente rastreia sua atividade diária, frequência cardíaca, qualidade do sono e muito mais. Com design elegante e conectividade Bluetooth, é o companheiro perfeito para ajudá-lo a alcançar seus objetivos de fitness.",
                            GymId = 2,
                            Name = "Pulseira Inteligente de Monitoramento de Atividade",
                            Price = 17.989999999999998,
                            Quantity = 6
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Miscalenous.HubImage", b =>
                {
                    b.Property<int>("HubImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HubImageId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GymId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("HubImageId");

                    b.HasIndex("GymId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            HubImageId = 1,
                            Height = 0,
                            Name = "proteinshaker.webp",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Fproteinshaker.webp?alt=media&token=57690fda-ea9e-4ad6-ab39-c286b3355af6",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 2,
                            Height = 0,
                            Name = "OIP.jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FOIP.jpg?alt=media&token=b4cb3cd0-ffef-4db1-8ba5-155bd52823e1",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 3,
                            Height = 0,
                            Name = "R.jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FR.jpg?alt=media&token=01fa4186-8a33-4a0c-b850-950274753e6e",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 4,
                            Height = 0,
                            Name = "OIP (1).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FOIP%20(1).jpg?alt=media&token=f7694b1c-8c1a-49ff-a498-d9d18346fb6d",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 5,
                            Height = 0,
                            Name = "faixa_elastica.webp",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Ffaixa_elastica.webp?alt=media&token=e47ab5ac-17d9-4d42-a4da-65dd8866bb0c",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 6,
                            Height = 0,
                            Name = "5b6NR6XbOeQ3nhKpx3MJ3aFwiTVR0A.jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2F5b6NR6XbOeQ3nhKpx3MJ3aFwiTVR0A.jpg?alt=media&token=fb078d90-1b1b-4087-a757-1de6e710b262",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 7,
                            Height = 0,
                            Name = "R (1).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FR%20(1).jpg?alt=media&token=46a110dd-a5f1-4faf-bc4e-8f77c49bbdc7",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 8,
                            Height = 0,
                            Name = "R (2).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FR%20(2).jpg?alt=media&token=693271cb-5daa-499f-a9a4-322ebc44ec59",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 9,
                            Height = 0,
                            Name = "R (3).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FR%20(3).jpg?alt=media&token=1030b9ff-9cf5-4276-a89f-a1ca38d7ed8e",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 10,
                            Height = 0,
                            Name = "550848_3_proform-passadeira-corrida-705-cst.jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2F550848_3_proform-passadeira-corrida-705-cst.jpg?alt=media&token=35c2d330-1af0-416c-8aba-757fb498da83",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 11,
                            Height = 0,
                            Name = "OIP (2).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FOIP%20(2).jpg?alt=media&token=3807105f-a18e-4d6b-86b4-8039065b2b51",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 12,
                            Height = 0,
                            Name = "bike-esteira-transport-escada-como-usar.webp",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Fbike-esteira-transport-escada-como-usar.webp?alt=media&token=81",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 13,
                            Height = 0,
                            Name = "R (4).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FR%20(4).jpg?alt=media&token=f8421d2f-e05b-4fbf-a7ee-3dfff219cabb",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 14,
                            Height = 0,
                            Name = "A.jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FA.jpg?alt=media&token=ea06d202-3dcf-4d2c-9913-fdad6e610fc4",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 15,
                            Height = 0,
                            Name = "OIP (3).jpg",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2FOIP%20(3).jpg?alt=media&token=b87b5398-e7a5-4cc2-9d67-e018e914e008",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 16,
                            GymId = 1,
                            Height = 0,
                            Name = "image_gym1ed18486e-14d1-4a09-8f6d-891442e7f3bf",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Fimage_gym1ed18486e-14d1-4a09-8f6d-891442e7f3bf?alt=media&token=cae942b0-700e-4fd2-89b5-000dbe1a28dd",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 17,
                            GymId = 1,
                            Height = 0,
                            Name = "image_gym1168bad0b-8e82-4eea-8b7f-95ea63104ed5",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Fimage_gym1168bad0b-8e82-4eea-8b7f-95ea63104ed5?alt=media&token=cf584d38-6dd9-41a4-945b-74c6721ef20c",
                            Width = 0
                        },
                        new
                        {
                            HubImageId = 18,
                            GymId = 1,
                            Height = 0,
                            Name = "image_gym1e4406c1c-43e6-48a3-b12e-994ed75ee3b3",
                            Path = "https://firebasestorage.googleapis.com/v0/b/easyfithub-a7cf3.appspot.com/o/images%2Fimage_gym1e4406c1c-43e6-48a3-b12e-994ed75ee3b3?alt=media&token=222687e0-b665-42e2-a3a7-1d4effb28d5f",
                            Width = 0
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountId"));

                    b.Property<int?>("GymId")
                        .HasColumnType("int");

                    b.Property<string>("GymSubscriptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GymSubscriptionPrice")
                        .HasColumnType("float");

                    b.Property<string>("StripeBankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePlanId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankAccountId");

                    b.HasIndex("GymId");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            BankAccountId = 1,
                            GymId = 1,
                            GymSubscriptionName = "Subscription Plan",
                            GymSubscriptionPrice = 40.0,
                            StripeBankId = "acct_1Ow4beRpgJmjBFH7",
                            StripePlanId = "plan_Prg8MwDUJOj1e3"
                        },
                        new
                        {
                            BankAccountId = 2,
                            GymId = 2,
                            GymSubscriptionName = "Subscription Plan",
                            GymSubscriptionPrice = 25.0,
                            StripeBankId = "acct_1Ow4bhRs2igcN0GT",
                            StripePlanId = "plan_Pld1tSPdt0Qqid"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.Buyable", b =>
                {
                    b.Property<int>("BuyableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyableId"));

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("BuyableType")
                        .HasColumnType("int");

                    b.Property<int>("DebitCardId")
                        .HasColumnType("int");

                    b.HasKey("BuyableId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("DebitCardId");

                    b.ToTable("Buyables");

                    b.HasDiscriminator<int>("BuyableType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.DebitCard", b =>
                {
                    b.Property<int>("DebitCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebitCardId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DebitCardId");

                    b.HasIndex("ClientId");

                    b.ToTable("DebitCard");

                    b.HasData(
                        new
                        {
                            DebitCardId = 1,
                            ClientId = 1,
                            StripeCustomerId = "cus_PlbprNroroGeFr",
                            StripePaymentMethodId = "pm_1Ow57fRseCm2355tph3WmrRE"
                        },
                        new
                        {
                            DebitCardId = 2,
                            ClientId = 2,
                            StripeCustomerId = "cus_Plbp64oawQ62uP",
                            StripePaymentMethodId = "pm_1Ow58dRseCm2355tiOre9byR"
                        },
                        new
                        {
                            DebitCardId = 3,
                            ClientId = 3,
                            StripeCustomerId = "cus_Plbp2N5j4PKj3t",
                            StripePaymentMethodId = "pm_1Ow59XRseCm2355te3uzVWWf"
                        },
                        new
                        {
                            DebitCardId = 7,
                            ClientId = 7,
                            StripeCustomerId = "cus_PlbpHhHFVJJZgn",
                            StripePaymentMethodId = "pm_1Ow5AORseCm2355tQ25Jge06"
                        },
                        new
                        {
                            DebitCardId = 8,
                            ClientId = 8,
                            StripeCustomerId = "cus_PlbpUx559W0bqL",
                            StripePaymentMethodId = "pm_1Ow5AyRseCm2355tgHg7cyRG"
                        },
                        new
                        {
                            DebitCardId = 9,
                            ClientId = 9,
                            StripeCustomerId = "cus_Plbpb7N2yNwzgm",
                            StripePaymentMethodId = "pm_1Ow5BaRseCm2355thRNhZIui"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.PaymentDetails", b =>
                {
                    b.Property<int>("PaymentDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailsId"));

                    b.Property<int>("BuyableId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailsId");

                    b.HasIndex("BuyableId");

                    b.ToTable("PaymentDetails");

                    b.HasData(
                        new
                        {
                            PaymentDetailsId = 1,
                            BuyableId = 1,
                            Description = "Subscription 1",
                            PaymentDate = new DateOnly(2024, 5, 4),
                            Status = 2
                        },
                        new
                        {
                            PaymentDetailsId = 2,
                            BuyableId = 2,
                            Description = "Subscription 2",
                            PaymentDate = new DateOnly(2024, 5, 4),
                            Status = 2
                        },
                        new
                        {
                            PaymentDetailsId = 3,
                            BuyableId = 3,
                            Description = "Subscription 3",
                            PaymentDate = new DateOnly(2024, 5, 4),
                            Status = 2
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HubImageId")
                        .HasColumnType("int");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HubImageId");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            ClientId = 1,
                            Description = "Este plano nutricional foi projetado para ajudá-lo a aumentar a massa muscular e ganhar peso de forma saudável. Inclui uma variedade de alimentos ricos em proteínas e carboidratos para apoiar o crescimento muscular.",
                            PlanType = 0,
                            Title = "Bulking Plan"
                        },
                        new
                        {
                            PlanId = 2,
                            ClientId = 1,
                            Description = "Este plano de exercícios foi desenvolvido para maximizar o ganho de massa muscular e força. Inclui uma combinação de exercícios de levantamento de peso e treinamento de resistência para estimular o crescimento muscular.",
                            PlanType = 1,
                            Title = "Bulking Plan"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanItem", b =>
                {
                    b.Property<int>("PlanItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.HasKey("PlanItemId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanItems");

                    b.HasDiscriminator<int>("PlanType").HasValue(2);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EasyFitHub.Models.Profile.Biometrics", b =>
                {
                    b.Property<int>("BiometricsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiometricsId"));

                    b.Property<double>("BodyMassIndex")
                        .HasColumnType("float");

                    b.Property<double>("FatMass")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("LeanMass")
                        .HasColumnType("float");

                    b.Property<int>("MetabolicAge")
                        .HasColumnType("int");

                    b.Property<double>("VisceralFat")
                        .HasColumnType("float");

                    b.Property<double>("WaterPercentage")
                        .HasColumnType("float");

                    b.Property<double>("Weigth")
                        .HasColumnType("float");

                    b.HasKey("BiometricsId");

                    b.ToTable("Biometrics");

                    b.HasData(
                        new
                        {
                            BiometricsId = 1,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 2,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 3,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 4,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 5,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 6,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 7,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 8,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 9,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 10,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 11,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        },
                        new
                        {
                            BiometricsId = 12,
                            BodyMassIndex = 0.0,
                            FatMass = 0.0,
                            Height = 0.0,
                            LeanMass = 0.0,
                            MetabolicAge = 0,
                            VisceralFat = 0.0,
                            WaterPercentage = 0.0,
                            Weigth = 0.0
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Profile.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<int>("BiometricsId")
                        .HasColumnType("int");

                    b.Property<int>("ClientDataId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("BiometricsId");

                    b.HasIndex("ClientDataId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            BiometricsId = 1,
                            ClientDataId = 1,
                            Description = "Descrição do Cliente 1",
                            Gender = 0,
                            UserId = 7
                        },
                        new
                        {
                            ClientId = 2,
                            BiometricsId = 2,
                            ClientDataId = 2,
                            Description = "Descrição do Cliente 2",
                            Gender = 1,
                            UserId = 8
                        },
                        new
                        {
                            ClientId = 3,
                            BiometricsId = 3,
                            ClientDataId = 3,
                            Description = "Descrição do Cliente 3",
                            Gender = 1,
                            UserId = 9
                        },
                        new
                        {
                            ClientId = 4,
                            BiometricsId = 4,
                            ClientDataId = 4,
                            Description = "Descrição do Cliente 4",
                            Gender = 1,
                            UserId = 10
                        },
                        new
                        {
                            ClientId = 5,
                            BiometricsId = 5,
                            ClientDataId = 5,
                            Description = "Descrição do Cliente 5",
                            Gender = 1,
                            UserId = 11
                        },
                        new
                        {
                            ClientId = 6,
                            BiometricsId = 6,
                            ClientDataId = 6,
                            Description = "Descrição do Cliente 6",
                            Gender = 1,
                            UserId = 12
                        },
                        new
                        {
                            ClientId = 7,
                            BiometricsId = 7,
                            ClientDataId = 7,
                            Description = "Descrição do Cliente 7",
                            Gender = 0,
                            UserId = 13
                        },
                        new
                        {
                            ClientId = 8,
                            BiometricsId = 8,
                            ClientDataId = 8,
                            Description = "Descrição do Cliente 8",
                            Gender = 0,
                            UserId = 14
                        },
                        new
                        {
                            ClientId = 9,
                            BiometricsId = 9,
                            ClientDataId = 9,
                            Description = "Descrição do Cliente 9",
                            Gender = 0,
                            UserId = 15
                        },
                        new
                        {
                            ClientId = 10,
                            BiometricsId = 10,
                            ClientDataId = 10,
                            Description = "Descrição do Cliente 10",
                            Gender = 0,
                            UserId = 16
                        },
                        new
                        {
                            ClientId = 11,
                            BiometricsId = 11,
                            ClientDataId = 11,
                            Description = "Descrição do Cliente 11",
                            Gender = 1,
                            UserId = 17
                        },
                        new
                        {
                            ClientId = 12,
                            BiometricsId = 12,
                            ClientDataId = 12,
                            Description = "Descrição do Cliente 12",
                            Gender = 0,
                            UserId = 18
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Profile.ClientData", b =>
                {
                    b.Property<int>("ClientDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientDataId"));

                    b.Property<int?>("ImageHubImageId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientDataId");

                    b.HasIndex("ImageHubImageId");

                    b.ToTable("ClientData");

                    b.HasData(
                        new
                        {
                            ClientDataId = 1,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 2,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 3,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 4,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 5,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 6,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 7,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 8,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 9,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 10,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 11,
                            Location = "Not set"
                        },
                        new
                        {
                            ClientDataId = 12,
                            Location = "Not set"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.ClientStats", b =>
                {
                    b.Property<int>("ClientStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientStatsId"));

                    b.Property<double>("BodyMassIndex")
                        .HasColumnType("float");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("FatMass")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("LeanMass")
                        .HasColumnType("float");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("VisceralFat")
                        .HasColumnType("float");

                    b.Property<double>("Weigth")
                        .HasColumnType("float");

                    b.HasKey("ClientStatsId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientStats");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.EmployeeStats", b =>
                {
                    b.Property<int>("EmployeeStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeStatsId"));

                    b.Property<int>("ClientCount")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeStatsId");

                    b.HasIndex("ClientId");

                    b.ToTable("EmployeeStats");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.GymStats", b =>
                {
                    b.Property<int>("GymStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymStatsId"));

                    b.Property<int>("ClientCount")
                        .HasColumnType("int");

                    b.Property<int?>("GymId")
                        .HasColumnType("int");

                    b.Property<int>("MachineCount")
                        .HasColumnType("int");

                    b.Property<int>("NutricionistCount")
                        .HasColumnType("int");

                    b.Property<int>("PTCount")
                        .HasColumnType("int");

                    b.Property<int>("SecretaryCount")
                        .HasColumnType("int");

                    b.Property<int>("ShopItemCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GymStatsId");

                    b.HasIndex("GymId");

                    b.ToTable("GymStats");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.PlatformStats", b =>
                {
                    b.Property<int>("PlatFormStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatFormStatsId"));

                    b.Property<double>("AvgAge")
                        .HasColumnType("float");

                    b.Property<int>("GymCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TheDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCount")
                        .HasColumnType("int");

                    b.HasKey("PlatFormStatsId");

                    b.ToTable("PlatformStats");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.StatisticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeStatsId1")
                        .HasColumnType("int");

                    b.Property<int?>("GymStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("GymStatsId1")
                        .HasColumnType("int");

                    b.Property<int?>("PlatFormStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("PlatFormStatsId1")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeStatsId");

                    b.HasIndex("EmployeeStatsId1");

                    b.HasIndex("GymStatsId");

                    b.HasIndex("GymStatsId1");

                    b.HasIndex("PlatFormStatsId");

                    b.HasIndex("PlatFormStatsId1");

                    b.ToTable("StatisticEntity");
                });

            modelBuilder.Entity("EasyFitHub.Models.Account.Admin", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Account.Account");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AccountType = 1,
                            Email = "202100296@estudantes.ips.pt",
                            Password = "8e945bf66837dcea295857efe792db4eaaa951e0b5edaca97c757ad41a9ad1d8",
                            UserName = "GVieira"
                        },
                        new
                        {
                            AccountId = 2,
                            AccountType = 1,
                            Email = "202100299@estudantes.ips.pt",
                            Password = "8e945bf66837dcea295857efe792db4eaaa951e0b5edaca97c757ad41a9ad1d8",
                            UserName = "RBarroso"
                        },
                        new
                        {
                            AccountId = 3,
                            AccountType = 1,
                            Email = "202100984@estudantes.ips.pt",
                            Password = "8e945bf66837dcea295857efe792db4eaaa951e0b5edaca97c757ad41a9ad1d8",
                            UserName = "FSilva"
                        },
                        new
                        {
                            AccountId = 4,
                            AccountType = 1,
                            Email = "201901953@estudantes.ips.pt",
                            Password = "8e945bf66837dcea295857efe792db4eaaa951e0b5edaca97c757ad41a9ad1d8",
                            UserName = "APauli"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Account.Manager", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Account.Account");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.HasIndex("GymId");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            AccountId = 5,
                            AccountType = 2,
                            Email = "GymTest1@email.pt",
                            Password = "46070d4bf934fb0d4b06d9e2c46e346944e322444900a435d7d9a95e6d7435f5",
                            UserName = "GymTest1",
                            GymId = 1
                        },
                        new
                        {
                            AccountId = 6,
                            AccountType = 2,
                            Email = "GymTest2@email.pt",
                            Password = "46070d4bf934fb0d4b06d9e2c46e346944e322444900a435d7d9a95e6d7435f5",
                            UserName = "GymTest2",
                            GymId = 2
                        },
                        new
                        {
                            AccountId = 19,
                            AccountType = 2,
                            Email = "GymTest3@email.pt",
                            Password = "46070d4bf934fb0d4b06d9e2c46e346944e322444900a435d7d9a95e6d7435f5",
                            UserName = "GymTest3",
                            GymId = 3
                        },
                        new
                        {
                            AccountId = 20,
                            AccountType = 2,
                            Email = "GymTest4@email.pt",
                            Password = "46070d4bf934fb0d4b06d9e2c46e346944e322444900a435d7d9a95e6d7435f5",
                            UserName = "GymTest4",
                            GymId = 4
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Account.User", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Account.Account");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            AccountId = 7,
                            AccountType = 3,
                            Email = "test1@gmail.com",
                            Password = "1b4f0e9851971998e732078544c96b36c3d01cedf7caa332359d6f1d83567014",
                            UserName = "test1",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Sofia",
                            Surname = "Almeida"
                        },
                        new
                        {
                            AccountId = 8,
                            AccountType = 3,
                            Email = "test2@gmail.com",
                            Password = "60303ae22b998861bce3b28f33eec1be758a213c86c93c076dbe9f558c11c752",
                            UserName = "test2",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Tiago",
                            Surname = "Martins"
                        },
                        new
                        {
                            AccountId = 9,
                            AccountType = 3,
                            Email = "test3@gmail.com",
                            Password = "fd61a03af4f77d870fc21e05e7e80678095c92d808cfb3b5c279ee04c74aca13",
                            UserName = "test3",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Joana",
                            Surname = "Silva"
                        },
                        new
                        {
                            AccountId = 10,
                            AccountType = 3,
                            Email = "test4@gmail.com",
                            Password = "a4e624d686e03ed2767c0abd85c14426b0b1157d2ce81d27bb4fe4f6f01d688a",
                            UserName = "test4",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Pedro",
                            Surname = "Santos"
                        },
                        new
                        {
                            AccountId = 11,
                            AccountType = 3,
                            Email = "test5@gmail.com",
                            Password = "a140c0c1eda2def2b830363ba362aa4d7d255c262960544821f556e16661b6ff",
                            UserName = "test5",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Mariana",
                            Surname = "Costa"
                        },
                        new
                        {
                            AccountId = 12,
                            AccountType = 3,
                            Email = "test6@gmail.com",
                            Password = "ed0cb90bdfa4f93981a7d03cff99213a86aa96a6cbcf89ec5e8889871f088727",
                            UserName = "test6",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Miguel",
                            Surname = "Ferreira"
                        },
                        new
                        {
                            AccountId = 13,
                            AccountType = 3,
                            Email = "test7@gmail.com",
                            Password = "bd7c911264aae15b66d4291b6850829aa96986b1d3ead34d1fdbfef27056c112",
                            UserName = "test7",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Carolina",
                            Surname = "Sousa"
                        },
                        new
                        {
                            AccountId = 14,
                            AccountType = 3,
                            Email = "test8@gmail.com",
                            Password = "1f9bfeb15fee8a10c4d0711c7eb0c083962123e1918e461b6a508e7146c189b2",
                            UserName = "test8",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Ricardo",
                            Surname = "Carvalho"
                        },
                        new
                        {
                            AccountId = 15,
                            AccountType = 3,
                            Email = "test9@gmail.com",
                            Password = "b4451034d3b6590060ce9484a28b88dd332a80a22ae8e39c9c5cb7357ab26c9f",
                            UserName = "test9",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Ana",
                            Surname = "Rodrigues"
                        },
                        new
                        {
                            AccountId = 16,
                            AccountType = 3,
                            Email = "test10@gmail.com",
                            Password = "ec2738feb2bbb0bc783eb4667903391416372ba6ed8b8dddbebbdb37e5102473",
                            UserName = "test10",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Bruno",
                            Surname = "Gonçalves"
                        },
                        new
                        {
                            AccountId = 17,
                            AccountType = 3,
                            Email = "test11@gmail.com",
                            Password = "744ea9ec6fa0a83e9764b4e323d5be6b55a5accfc7fe4c08eab6a8de1fca4855",
                            UserName = "test11",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Beatriz",
                            Surname = "Lima"
                        },
                        new
                        {
                            AccountId = 18,
                            AccountType = 3,
                            Email = "test12@gmail.com",
                            Password = "a98ec5c5044800c88e862f007b98d89815fc40ca155d6ce7909530d792e909ce",
                            UserName = "test12",
                            BirthDate = new DateOnly(2002, 1, 6),
                            Name = "Diogo",
                            Surname = "Ribeiro"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.Cart", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Payment.Buyable");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.Subscription", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Payment.Buyable");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            BuyableId = 1,
                            BankAccountId = 1,
                            BuyableType = 1,
                            DebitCardId = 1,
                            StripeSubscriptionId = "sub_1P1wmYRseCm2355teKZtrJLj"
                        },
                        new
                        {
                            BuyableId = 2,
                            BankAccountId = 1,
                            BuyableType = 1,
                            DebitCardId = 2,
                            StripeSubscriptionId = "sub_1P1wmbRseCm2355tRI7Ee9iR"
                        },
                        new
                        {
                            BuyableId = 3,
                            BankAccountId = 1,
                            BuyableType = 1,
                            DebitCardId = 3,
                            StripeSubscriptionId = "sub_1P1wmeRseCm2355t542tsUZV"
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanExercise", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Plan.PlanItem");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.HasIndex("ExerciseId");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            PlanItemId = 4,
                            Description = "Este exercício de treino de força é focado no desenvolvimento muscular e na melhoria da força e resistência. Incorporando uma variedade de movimentos e técnicas de levantamento de peso, este treino visa fortalecer os principais grupos musculares do corpo.",
                            Name = "Treino de Força",
                            PlanId = 2,
                            PlanType = 1,
                            ExerciseId = 1
                        },
                        new
                        {
                            PlanItemId = 5,
                            Description = "Este exercício de cardio intenso é projetado para elevar sua frequência cardíaca e queimar calorias de forma eficaz. Com uma combinação de movimentos aeróbicos de alta intensidade, este treino melhora a capacidade cardiovascular e promove a perda de peso.",
                            Name = "Cardio Intenso",
                            PlanId = 2,
                            PlanType = 1,
                            ExerciseId = 1
                        },
                        new
                        {
                            PlanItemId = 6,
                            Description = "Este exercício de alongamento e flexibilidade é ideal para melhorar a amplitude de movimento, reduzir a rigidez muscular e prevenir lesões. Concentrando-se em esticar os principais grupos musculares, este treino ajuda a aumentar a mobilidade e a flexibilidade geral do corpo.",
                            Name = "Alongamento e Flexibilidade",
                            PlanId = 2,
                            PlanType = 1,
                            ExerciseId = 2
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanMeal", b =>
                {
                    b.HasBaseType("EasyFitHub.Models.Plan.PlanItem");

                    b.Property<int?>("HubImageId")
                        .HasColumnType("int");

                    b.HasIndex("HubImageId");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            PlanItemId = 1,
                            Description = "Esta refeição é especialmente formulada para fornecer uma dose nutritiva e energética para começar o dia com energia. Inclui uma mistura equilibrada de proteínas, carboidratos e gorduras saudáveis para sustentar suas atividades matinais.",
                            Name = "Refeição Matinal",
                            PlanId = 1,
                            PlanType = 0
                        },
                        new
                        {
                            PlanItemId = 2,
                            Description = "Esta refeição é projetada para ajudar na recuperação muscular e reabastecer o corpo após um treino intenso. Rica em proteínas de alta qualidade e carboidratos de rápida absorção, esta refeição promove a regeneração muscular e a reposição de energia.",
                            Name = "Refeição Pós-Treino",
                            PlanId = 1,
                            PlanType = 0
                        },
                        new
                        {
                            PlanItemId = 3,
                            Description = "Esta refeição noturna é projetada para promover a recuperação muscular durante o sono e manter um metabolismo saudável durante a noite. Contendo nutrientes essenciais e de digestão lenta, esta refeição ajuda a manter a saciedade e suporta o reparo muscular durante o descanso.",
                            Name = "Refeição Noturna",
                            PlanId = 1,
                            PlanType = 0
                        });
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymClient", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("GymClients")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymEmployee", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("GymEmployees")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymRelation", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.GymClient", "GymClient")
                        .WithMany("GymEmployees")
                        .HasForeignKey("GymClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Gym.GymEmployee", "GymEmployee")
                        .WithMany("GymClients")
                        .HasForeignKey("GymEmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GymClient");

                    b.Navigation("GymEmployee");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymRequest", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("Requests")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.Exercise", b =>
                {
                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("EasyFitHub.Models.Inventory.GymMachine", "Machine")
                        .WithMany("Exercise")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.GymMachine", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("Machines")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Gym");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.Item", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("Items")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Gym");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EasyFitHub.Models.Miscalenous.HubImage", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany("Images")
                        .HasForeignKey("GymId");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.BankAccount", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.Buyable", b =>
                {
                    b.HasOne("EasyFitHub.Models.Payment.BankAccount", "GymBank")
                        .WithMany("Buyables")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Payment.DebitCard", "ClientDebitCard")
                        .WithMany("Buyables")
                        .HasForeignKey("DebitCardId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("ClientDebitCard");

                    b.Navigation("GymBank");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.CartItem", b =>
                {
                    b.HasOne("EasyFitHub.Models.Payment.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Inventory.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.DebitCard", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.PaymentDetails", b =>
                {
                    b.HasOne("EasyFitHub.Models.Payment.Buyable", "Buyable")
                        .WithMany()
                        .HasForeignKey("BuyableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyable");
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.Plan", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "HubImage")
                        .WithMany()
                        .HasForeignKey("HubImageId");

                    b.Navigation("Client");

                    b.Navigation("HubImage");
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanItem", b =>
                {
                    b.HasOne("EasyFitHub.Models.Plan.Plan", "Plan")
                        .WithMany("Items")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("EasyFitHub.Models.Profile.Client", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Biometrics", "Biometrics")
                        .WithMany()
                        .HasForeignKey("BiometricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Profile.ClientData", "Data")
                        .WithMany()
                        .HasForeignKey("ClientDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyFitHub.Models.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biometrics");

                    b.Navigation("Data");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyFitHub.Models.Profile.ClientData", b =>
                {
                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageHubImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.ClientStats", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.EmployeeStats", b =>
                {
                    b.HasOne("EasyFitHub.Models.Profile.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.GymStats", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.StatisticEntity", b =>
                {
                    b.HasOne("EasyFitHub.Models.Statistics.EmployeeStats", null)
                        .WithMany("UserAgeRates")
                        .HasForeignKey("EmployeeStatsId");

                    b.HasOne("EasyFitHub.Models.Statistics.EmployeeStats", null)
                        .WithMany("UserSexRates")
                        .HasForeignKey("EmployeeStatsId1");

                    b.HasOne("EasyFitHub.Models.Statistics.GymStats", null)
                        .WithMany("AgeRates")
                        .HasForeignKey("GymStatsId");

                    b.HasOne("EasyFitHub.Models.Statistics.GymStats", null)
                        .WithMany("SexRates")
                        .HasForeignKey("GymStatsId1");

                    b.HasOne("EasyFitHub.Models.Statistics.PlatformStats", null)
                        .WithMany("SexRates")
                        .HasForeignKey("PlatFormStatsId");

                    b.HasOne("EasyFitHub.Models.Statistics.PlatformStats", null)
                        .WithMany("TopGyms")
                        .HasForeignKey("PlatFormStatsId1");
                });

            modelBuilder.Entity("EasyFitHub.Models.Account.Manager", b =>
                {
                    b.HasOne("EasyFitHub.Models.Gym.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanExercise", b =>
                {
                    b.HasOne("EasyFitHub.Models.Inventory.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.PlanMeal", b =>
                {
                    b.HasOne("EasyFitHub.Models.Miscalenous.HubImage", "HubImage")
                        .WithMany()
                        .HasForeignKey("HubImageId");

                    b.Navigation("HubImage");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.Gym", b =>
                {
                    b.Navigation("GymClients");

                    b.Navigation("GymEmployees");

                    b.Navigation("Images");

                    b.Navigation("Items");

                    b.Navigation("Machines");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymClient", b =>
                {
                    b.Navigation("GymEmployees");
                });

            modelBuilder.Entity("EasyFitHub.Models.Gym.GymEmployee", b =>
                {
                    b.Navigation("GymClients");
                });

            modelBuilder.Entity("EasyFitHub.Models.Inventory.GymMachine", b =>
                {
                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.BankAccount", b =>
                {
                    b.Navigation("Buyables");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.DebitCard", b =>
                {
                    b.Navigation("Buyables");
                });

            modelBuilder.Entity("EasyFitHub.Models.Plan.Plan", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.EmployeeStats", b =>
                {
                    b.Navigation("UserAgeRates");

                    b.Navigation("UserSexRates");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.GymStats", b =>
                {
                    b.Navigation("AgeRates");

                    b.Navigation("SexRates");
                });

            modelBuilder.Entity("EasyFitHub.Models.Statistics.PlatformStats", b =>
                {
                    b.Navigation("SexRates");

                    b.Navigation("TopGyms");
                });

            modelBuilder.Entity("EasyFitHub.Models.Payment.Cart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
